package ch.isageek.tyderion.habittracker.model;

import ch.isageek.tyderion.habittracker.model.DaoSession;
import de.greenrobot.dao.DaoException;






// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table OCCURENCE.
 */
abstract public class OccurenceBase {

    protected Long id;
    protected java.util.Date date;
    protected Long habitID;




    /** Used to resolve relations */
    protected transient DaoSession daoSession;

    /** Used for active entity operations. */
    protected transient OccurenceDao myDao;

    protected Habit habit;
    protected Long habit__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public OccurenceBase() {
    }

    public OccurenceBase(Long id) {
        this.id = id;
    }

    public OccurenceBase(Long id, java.util.Date date, Long habitID) {
        this.id = id;
        this.date = date;
        this.habitID = habitID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOccurenceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getHabitID() {
        return habitID;
    }

    public void setHabitID(Long habitID) {
        this.habitID = habitID;
    }

    /** To-one relationship, resolved on first access. */
    public Habit getHabit() {
        if (habit__resolvedKey == null || !habit__resolvedKey.equals(habitID)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HabitDao targetDao = daoSession.getHabitDao();
            habit = targetDao.load(habitID);
            habit__resolvedKey = habitID;
        }
        return habit;
    }

    public void setHabit(Habit habit) {
        this.habit = habit;
        habitID = habit == null ? null : habit.getId();
        habit__resolvedKey = habitID;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete((Occurence)this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update((Occurence)this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh((Occurence)this);
    }

    public void updateNotNull(Occurence other) {
        if(this == other) {
            return;//both came from db, no need to run this.
        }

        if(other.id != null) {
            this.id = other.id;
        }


        if(other.date != null) {
            this.date = other.date;
        }


        if(other.habitID != null) {
            this.habitID = other.habitID;
        }

        // relationships
        if(other.getHabit() != null) {
            this.setHabit(other.getHabit());
        }
    }


    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

    public void onBeforeSave() {
        //you can override this method and do some stuff if you want to :)

    }
}
