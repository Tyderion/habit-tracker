package ch.isageek.tyderion.habittracker.model;



// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;

import com.dropbox.sync.android.DbxDatastore;
import com.dropbox.sync.android.DbxException;
import com.dropbox.sync.android.DbxFields;
import com.dropbox.sync.android.DbxList;
import com.dropbox.sync.android.DbxRecord;
import com.dropbox.sync.android.DbxTable;

import java.util.UUID;

import ch.isageek.tyderion.habittracker.settings.DropboxHelper;


// KEEP INCLUDES END
/**
 * Entity mapped to table HABIT.
 */
public class Habit extends HabitBase implements Parcelable {
    // KEEP FIELDS - put your custom fields here

    private static String DbxUUID = "UUID";
    private static String DbxDateCreated = "dateCreated";
    private static String DbxIsPositive = "isPositive";
    private static String DbxName = "name";
    private static String DbxDescription = "description";
    private static String DbxOccurrences = "description";

    // KEEP FIELDS END
    public Habit() {
    }

    public Habit(Long id) {
        super(id);
    }

    public Habit(Long id, java.util.Date dateCreated, String name, Boolean isPositive, String description, String uuid) {
        super(id, dateCreated, name, isPositive, description, uuid);
    }

    // KEEP METHODS - put your custom methods here
    public Habit(Parcel parcel) {
        super(parcel);
    }

    public Habit(Long id, java.util.Date dateCreated, String name, Boolean isPositive, String description) {
        super(id, dateCreated, name, isPositive, description, "");
    }

    @Override
    public String toString() {
        return name;
    }

    public void saveToDropbox(Context context) {
        DbxTable habitsTable = DropboxHelper.getInstance(context).getHabitTable();
        if (habitsTable != null && DbxTable.isValidId(getUuid())) {
            try {
                DbxRecord record = habitsTable.getOrInsert(getUuid());
                record.set(DbxName, getName()).set(DbxDateCreated, getDateCreated()).set(DbxDescription, getDescription()).set(DbxIsPositive, getIsPositive()).set(DbxUUID, getUuid());
                DbxList list = new DbxList();
                for (Occurrence occurrence : getOccurrenceList()) {
                    list.add(occurrence.getDate());
                }
                record.set(DbxOccurrences, list);
            } catch (DbxException e) {
                e.printStackTrace();
            }
        }
        DbxDatastore store = habitsTable.getDatastore();
        if (store.isOpen()) {
            store.close();
        }
    }



    // KEEP METHODS END

    @Override
    public void onBeforeSave() {
        super.onBeforeSave();
        if (this.uuid == null || this.uuid.length() != 36) {
            this.uuid = UUID.randomUUID().toString();
        }
    }


}
